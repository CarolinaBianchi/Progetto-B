package gui;

import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.HashMap;
import java.util.Map;
import java.util.Observable;
import java.util.Observer;
import java.util.Scanner;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import risiko.Country;
import risiko.Phase;
import risiko.Game;
import risiko.Player;

/**
 * @author andrea
 */
public class GUI extends JFrame implements Observer{
    private Game game;
    private final Map<Color, String>  colorCountryNameMap;
    private final int N_GIOCATORI=2;

    public GUI() throws Exception {
        initComponents();
        game = new Game(N_GIOCATORI);
        colorCountryNameMap=readColorTextMap("src/gui/color.txt");
        LabelMapListener labelMapListener = new LabelMapListener(convertToBufferedImage(labelMap), colorCountryNameMap, game);
        labelMap.addMouseListener(labelMapListener);
        labelMap.addMouseMotionListener(labelMapListener);
        labelPlayerPhase.setText(game.getPlayerPhase());
    }
    
    private void update() {
        this.labelPlayerPhase.setText(game.getPlayerPhase());
        if (game.getPhase().equals(Phase.REINFORCE)){
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelMap = new javax.swing.JLabel();
        labelPlayerPhase = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaInfo = new javax.swing.JTextArea();
        buttonAttack = new javax.swing.JButton();
        buttonNextPhase = new javax.swing.JButton();
        buttonMoreInfo = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        labelMap.setIcon(new javax.swing.ImageIcon(getClass().getResource("/gui/cartina_italia.png"))); // NOI18N

        labelPlayerPhase.setBackground(new java.awt.Color(225, 207, 218));
        labelPlayerPhase.setForeground(new java.awt.Color(1, 1, 1));

        textAreaInfo.setColumns(20);
        textAreaInfo.setRows(5);
        jScrollPane1.setViewportView(textAreaInfo);

        buttonAttack.setText("attack");
        buttonAttack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonAttackActionPerformed(evt);
            }
        });

        buttonNextPhase.setText("nextPhase");
        buttonNextPhase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNextPhaseActionPerformed(evt);
            }
        });

        buttonMoreInfo.setText("MoreInfo");
        buttonMoreInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMoreInfoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(labelPlayerPhase, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelMap)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(buttonAttack, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(buttonNextPhase, javax.swing.GroupLayout.DEFAULT_SIZE, 323, Short.MAX_VALUE)
                            .addComponent(buttonMoreInfo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelPlayerPhase, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(labelMap)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonMoreInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonNextPhase, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(buttonAttack, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonMoreInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMoreInfoActionPerformed
        String format = "%-30s %-15s %s";
        String info=String.format(format, "territorio", "proprietario", "numero armate") + "\n";
        for (Map.Entry<Country, Player> e : game.getCountryPlayer().entrySet()) 
            info+=String.format(format, e.getKey().getName(), e.getValue().getName(), e.getKey().getArmies()) + "\n";
        JOptionPane.showMessageDialog(null,info);
    }//GEN-LAST:event_buttonMoreInfoActionPerformed

    private void buttonNextPhaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNextPhaseActionPerformed
        game.nextPhase();
        update();
    }//GEN-LAST:event_buttonNextPhaseActionPerformed

    private void buttonAttackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonAttackActionPerformed
        if (game.getPhase().equals(Phase.FIGHT)) {
            //I controlli sulla validità di AttackerCountryName e DefenderCountryName sono già stati fatti nel metodo mouseClicked di LabelMapListener
            if (game.getAttackerCountryName()!=null && game.getDefenderCountryName()!=null) {
                JDialog inputArmies = new JDialog();
                JPanel dialogPanel = new JPanel(new GridLayout(0, 2));
                JLabel attackText = new JLabel(" n armate attaccco");
                JLabel defenseText = new JLabel(" n armate difesa");
                SpinnerNumberModel attackerModel = new SpinnerNumberModel(1, 1, game.getMaxArmies(game.getAttackerCountryName(), true), 1);
                SpinnerNumberModel defenserModel = new SpinnerNumberModel(1, 1, game.getMaxArmies(game.getDefenderCountryName(), false), 1);
                JSpinner attackerArmies = new JSpinner(attackerModel);
                JSpinner defenserArmies = new JSpinner(defenserModel);
                JButton execute = new JButton("Esegui");
                execute.addActionListener(new ActionListener() {
                    @Override
                    public void actionPerformed(ActionEvent ae) {
                        game.attack((int) attackerArmies.getValue(), (int) defenserArmies.getValue());
                        textAreaInfo.setText(game.getAttackResult().toString());
                        if (game.getAttackResult().isIsConquered()) {
                            JOptionPane.showMessageDialog(null, "Complimenti, il terriotorio in difesa è stato conquistato.");
                            inputArmies.dispose();
                            return;
                        }
                        if (!game.canAttackFromCountry(game.getAttackerCountryName())) {
                            JOptionPane.showMessageDialog(null, "Non è più possibile effettuare attacchi da questo territorio.");
                            inputArmies.dispose();
                            return;
                        }
                        attackerArmies.setModel(new SpinnerNumberModel(1, 1, game.getMaxArmies(game.getAttackerCountryName(),  true), 1));
                        defenserArmies.setModel(new SpinnerNumberModel(1, 1, game.getMaxArmies(game.getDefenderCountryName(), false), 1));
                    }
                });
                dialogPanel.add(attackText);
                dialogPanel.add(defenseText);
                dialogPanel.add(attackerArmies);
                dialogPanel.add(defenserArmies);
                dialogPanel.add(execute);
                inputArmies.add(dialogPanel);
                inputArmies.setModal(true);
                inputArmies.setSize(600, 300);
                inputArmies.setVisible(true);
            }
            game.setAttackerCountry(null);
            game.setDefenderCountry(null);
        }
    }//GEN-LAST:event_buttonAttackActionPerformed
    
    /**
     * Procedurone per la creazione di una map<Color,String> a partire da un file di testo 
     * contenente un numero a piacere di linee, dove ogni linea contiene un [token] avente la forma:
     * [token]   -> [Country] = [RGB]
     * [Country] -> qualsiasi sequenza di caratteri ASCII diversi dal carattere = e interruzioni di linea 
     * [RGB]     -> [R],[G],[B]
     * [R]       -> un numerCountryo intero da 0 a 255
     * [G]       -> un numero intero da 0 a 255
     * [B]       -> un numero intero da 0 a 255.
     */
    private static Map<Color,String> readColorTextMap(String relativeURL) throws FileNotFoundException{
        Map<Color, String> map = new HashMap<>();
        try (Scanner scanner   = new Scanner(new FileReader(relativeURL))) {
            while(scanner.hasNextLine()) {
                String[] tokens  = scanner.nextLine().split("=");
                String[] RGB     = tokens[1].split(",");
                String   country = tokens[0].trim();
                int      R       = Integer.parseInt(RGB[0].trim());
                int      G       = Integer.parseInt(RGB[1].trim());
                int      B       = Integer.parseInt(RGB[2].trim());             
                Color    color   = new Color( R,G,B);
                map.put( color, country);
            }
        }
        return map;
    }
    
    /**
     * Metodo necessario per convertire la labelMap in una bufferedMap a causa della GUI che è stata creata con DESIGN
     * @param labelMap
     * @return 
     */
    private static BufferedImage convertToBufferedImage(JLabel labelMap){
        ImageIcon imgIcon = ((ImageIcon) labelMap.getIcon());
        Image     image   = imgIcon.getImage();
        BufferedImage  newImage = new BufferedImage(image.getWidth(null), image.getHeight(null), BufferedImage.TYPE_INT_ARGB);
        Graphics2D g = newImage.createGraphics();
        g.drawImage(image, 0, 0, null);
        g.dispose();
        return newImage;
    }   
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonAttack;
    private javax.swing.JButton buttonMoreInfo;
    private javax.swing.JButton buttonNextPhase;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelMap;
    private javax.swing.JLabel labelPlayerPhase;
    private javax.swing.JTextArea textAreaInfo;
    // End of variables declaration//GEN-END:variables

    @Override
    public void update(Observable o, Object arg) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
